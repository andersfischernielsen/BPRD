***********
Assignment2
AFIN
***********


------------
Exercise 3.2
------------ 
a?(b+a?)*
See attached PNG for DFA drawing.


------------
Exercise 3.3
------------
Main 			
Expr EOF										//Rule A
let NAME = Expr in Expr end EOF					//Rule F
let NAME = Expr in Expr + Expr end EOF 			//Rule H 	(do this before expanding the * Expr due to precedens)
let NAME = Expr in Expr + Expr * Expr end EOF	//Rule G
let NAME = Expr in Expr + Expr * 3 end EOF		//Rule C
let NAME = Expr in Expr + 2 * 3 end EOF			//Rule C
let NAME = Expr in z + 2 * 3 end EOF			//Rule B
let NAME = (Expr) in z + 2 * 3 end EOF			//Rule E
let NAME = (17) in z + 2 * 3 end EOF			//Rule C
let z = (17) in z + 2 * 3 end EOF				//Rule B


------------
Exercise 3.4
------------
See attached PNG.


------------
Exercise 3.5
------------
I did the stuff I was asked. 
(I don't really have an answer for this exercise).


------------
Exercise 3.6
------------
let compString s = scomp (fromString s) [];;

------------
Exercise 3.7
------------
Extend the expression language abstract syntax and the lexer and parser specifications with conditional expressions. The abstract syntax should be If(e1, e2, e3), so modify file Absyn.fs as well as ExprLex.fsl and file ExprPar.fsy. The concrete syntax may be the keyword-laden F#/ML-style:
if e1 then e2 else e3
or the more light-weight C/C++/Java/C#-style:
e1 ? e2 : e3
Some documentation for fslex and fsyacc is found in this chapter and in Expert
F# [17].
